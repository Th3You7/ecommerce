{"version":3,"sources":["screens/LogInScreen.js"],"names":["useStyles","makeStyles","theme","container","padding","spacing","title","fontWeight","fontSize","margin","input","marginBottom","btn","marginTop","schema","yup","shape","email","required","password","LogInScreen","classes","useForm","resolver","yupResolver","handleSubmit","register","errors","formState","history","useHistory","dispatch","useDispatch","useSelector","state","logInReducer","result","loading","useEffect","token","localStorage","getItem","push","className","variant","component","autoComplete","onSubmit","data","logInAction","error","label","name","fullWidth","inputRef","helperText","message","type","color","size"],"mappings":"kGAAA,gKAeMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,QAASF,EAAMG,QAAQ,IAGzBC,MAAO,CACLC,WAAY,IACZC,SAAUN,EAAMG,QAAQ,GACxBI,OAAQP,EAAMG,QAAQ,EAAG,EAAG,IAG9BK,MAAO,CACLC,aAAcT,EAAMG,QAAQ,IAE9BO,IAAK,CACHC,UAAWX,EAAMG,QAAQ,QAIvBS,EAASC,MAAaC,MAAM,CAChCC,MAAOF,MAAaE,QAAQC,SAAS,eACrCC,SAAUJ,MAAaG,SAAS,oBAGnB,SAASE,IAAe,IAAD,IAC9BC,EAAUrB,IADoB,EAMhCsB,YAAQ,CACVC,SAAUC,sBAAYV,KAJtBW,EAHkC,EAGlCA,aACAC,EAJkC,EAIlCA,SACaC,EALqB,EAKlCC,UAAaD,OAITE,EAAUC,cACVC,EAAWC,cAVmB,EAWRC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAAjDC,EAX4B,EAW5BA,OAAQC,EAXoB,EAWpBA,QAChBC,qBAAU,YACG,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQG,QAETC,aAAaC,QAAQ,UAAUZ,EAAQa,KAAK,OACxD,CAACN,EAAQP,IAIZ,OACE,sBAAKc,UAAWtB,EAAQlB,UAAxB,UACE,cAAC,IAAD,CAAYyC,QAAQ,KAAKC,UAAU,KAAKF,UAAWtB,EAAQf,MAA3D,2BAIA,uBAAMwC,aAAa,MAAMC,SAAUtB,GATtB,SAACuB,GAChBjB,EAASkB,YAAYD,OAQnB,UACE,cAAC,IAAD,CACEE,QAAOvB,EAAOV,MACdkC,MAAM,SACNC,KAAK,QACLC,WAAS,EACTV,UAAWtB,EAAQX,MACnBD,OAAO,QAMP6C,SAAU5B,EACV6B,WAAU,UAAE5B,EAAOV,aAAT,aAAE,EAAcuC,UAG5B,cAAC,IAAD,CACEN,QAAOvB,EAAOR,SACdsC,KAAK,WACLd,UAAWtB,EAAQX,MACnByC,MAAM,WACNC,KAAK,WACL3C,OAAO,QACP4C,WAAS,EAGTC,SAAU5B,EACV6B,WAAU,UAAE5B,EAAOR,gBAAT,aAAE,EAAiBqC,WAG7BnB,GACA,cAAC,IAAD,CACEM,UAAWtB,EAAQT,IACnBgC,QAAQ,YACRc,MAAM,UACNC,KAAK,QACLF,KAAK,SALP,oBAUDpB,GAAW,cAAC,IAAD,CAAkBqB,MAAM","file":"static/js/44.5b10964f.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  makeStyles,\n  Typography,\n  TextField,\n  Button,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { logInAction } from \"../actions/adminAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4),\n  },\n\n  title: {\n    fontWeight: 700,\n    fontSize: theme.spacing(3),\n    margin: theme.spacing(4, 0, 6),\n  },\n\n  input: {\n    marginBottom: theme.spacing(3),\n  },\n  btn: {\n    marginTop: theme.spacing(4),\n  },\n}));\n\nconst schema = yup.object().shape({\n  email: yup.string().email().required(\"Enter email\"),\n  password: yup.string().required(\"Enter password\"),\n});\n\nexport default function LogInScreen() {\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { result, loading } = useSelector((state) => state.logInReducer);\n  useEffect(() => {\n    const token = result?.token;\n\n    if (token && localStorage.getItem(\"admin\")) history.push(\"/\");\n  }, [result, history]);\n  const onSubmit = (data) => {\n    dispatch(logInAction(data));\n  };\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h2\" component=\"h2\" className={classes.title}>\n        Welcome Back!\n      </Typography>\n\n      <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n        <TextField\n          error={errors.email ? true : false}\n          label=\"E-mail\"\n          name=\"email\"\n          fullWidth\n          className={classes.input}\n          margin=\"dense\"\n          //   InputLabelProps={{\n          //     shrink: true,\n          //   }}\n          // variant=\"filled\"\n          //   defaultValue={name}\n          inputRef={register}\n          helperText={errors.email?.message}\n        />\n\n        <TextField\n          error={errors.password ? true : false}\n          type=\"password\"\n          className={classes.input}\n          label=\"Password\"\n          name=\"password\"\n          margin=\"dense\"\n          fullWidth\n          // variant=\"filled\"\n          //   defaultValue={price}\n          inputRef={register}\n          helperText={errors.password?.message}\n        />\n\n        {!loading && (\n          <Button\n            className={classes.btn}\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            type=\"submit\"\n          >\n            Log In\n          </Button>\n        )}\n        {loading && <CircularProgress color=\"inherit\" />}\n      </form>\n    </div>\n  );\n}\n"],"sourceRoot":""}